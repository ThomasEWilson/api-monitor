# Docker Compose file Reference (https://docs.docker.com/compose/compose-file/)

version: '3.7'

# TODO: 
# 1. app-server Dockerfile
# 2. app-client Dockerfile


services:

  # Reverse Proxy: API Gateway
  proxy:
    image: nginx
    volumes:
      - ./conf.d/default.conf:/etc/nginx/conf.d/default.conf
    ports:                                               
      - "80:80"
    restart: always
    depends_on:
      - app-client
    networks:
      - app-front
      - app-back
  
  # Frontend POLYMER Client Web-Server
  app-client:
    container_name: app.thrivefhirhealth.io
    # image: spring-web-postgres-compose_app-client:latest
    build:
      context: open-wc/client-app # Use an image built from the specified dockerfile in the `client` directory.
    command: npm start
    init: true
    ports:
      - "1452:8000"
    volumes:
      - ./open-wc/client-app:/opt/node_app/app
      # bind-mounting these two files in will let you add packages during development without rebuilding
      # for example, to add bower to your app while developing, just install it inside the container
      # and then nodemon will restart. Your changes will last until you "docker-compose down" and will
      # be saved on host for next build
      # NOTE: this won't work on Docker Toolbox (virtualbox) which doesn't bind-mount single files
      # docker-compose exec node npm install --save bower
      - ./open-wc/client-app/package.json:/opt/node_app/package.json
      - ./open-wc/client-app/package-lock.json:/opt/node_app/package-lock.json
      # this is a workaround to prevent host node_modules from accidently getting mounted in container
      # in case you want to use node/npm both outside container for test/lint etc. and also inside container
      # this will overwrite the default node_modules dir in container so it won't conflict with our
      # /opt/node_app/node_modules location. Thanks to PR from @brnluiz
      - notused:/opt/node_app/app/node_modules
    restart: always
    depends_on:
      - app-server
    networks:
      - app-front


  # # App backend service
  app-server:
    # Configuration for building the docker image for the backend service
    container_name: api.thrivefhirhealth.io
    image: spring-web-postgres-compose_app-server:latest
    # build:
      # context: api-server/thrive-fhir-health-api # Use an image built from the specified dockerfile in the `polling-app-server` directory.
    ports:
      - "4242:8080" # HOST:CONTAINER
    restart: always
    depends_on: 
      - db # This service depends on postgres. Start that first.
    environment: # Change DataSource for postgres:
      SPRING_DATASOURCE_URL: jdbc:postgres://db:3306/postgres?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
      SPRING_DATASOURCE_USERNAME: tew_dbadmin
      SPRING_DATASOURCE_PASSWORD: masterpass     
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - app-front
      - app-back

  # Database Service (postgres)
  db:
    image: postgres:11
    ports:
      - "5432:5432"
    restart: always
    environment: # same as -e in docker run
      - POSTGRES_DB=postgres
      - POSTGRES_USER=tew_dbadmin
      - POSTGRES_PASSWORD=masterpass
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - app-back
  
# Volumes
volumes:
  db-data:
  notused:

# Networks to be created to facilitate communication between containers
networks:
  app-front:
  app-back: